{
  "stats": {
    "suites": 9,
    "tests": 34,
    "passes": 34,
    "pending": 0,
    "failures": 0,
    "start": "2018-09-11T03:50:20.747Z",
    "end": "2018-09-11T03:50:21.255Z",
    "duration": 508,
    "testsRegistered": 34,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "54f46522-b959-404e-9801-865e743a3de9",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "aa6f2775-7619-4b8d-8c81-1776b31f68c9",
        "title": "InitStats Unit Tests",
        "fullFile": "/Users/jd10778/repos/public/wdio-mochawesome-reporter/src/map_stats/InitStats.spec.js",
        "file": "/src/map_stats/InitStats.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Should return a valid stats object",
            "fullTitle": "InitStats Unit Tests Should return a valid stats object",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var stats = (0, _InitStats2.default)({ stats: { start: 1, end: 2, _duration: 3 } });\nexpect(stats.start).to.equal(1);\nexpect(stats.end).to.equal(2);\nexpect(stats.duration).to.equal(3);",
            "err": {},
            "isRoot": false,
            "uuid": "97ec6125-a291-423a-9364-32ff14f9ce7f",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "97ec6125-a291-423a-9364-32ff14f9ce7f"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 8000
      },
      {
        "uuid": "15a23638-8ac3-415f-90d3-2f67028c9f6a",
        "title": "UpdateStats Unit Tests",
        "fullFile": "/Users/jd10778/repos/public/wdio-mochawesome-reporter/src/map_stats/UpdateStats.spec.js",
        "file": "/src/map_stats/UpdateStats.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Should incremet pass",
            "fullTitle": "UpdateStats Unit Tests Should incremet pass",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var stats = (0, _InitStats2.default)({ stats: { start: 1, end: 2, _duration: 3 } });\nstats = (0, _UpdateStats2.default)(stats, { pass: true });\nexpect(stats.tests).to.equal(1);\nexpect(stats.testsRegistered).to.equal(1);\nexpect(stats.passes).to.equal(1);\nexpect(stats.failures).to.equal(0);\nexpect(stats.pending).to.equal(0);\nexpect(stats.passPercent).to.equal(100);\nexpect(stats.pendingPercent).to.equal(0);",
            "err": {},
            "isRoot": false,
            "uuid": "4f2e5f02-ae80-43f2-ae67-aa474dec887b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should incremet fail",
            "fullTitle": "UpdateStats Unit Tests Should incremet fail",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var stats = (0, _InitStats2.default)({ stats: { start: 1, end: 2, _duration: 3 } });\nstats = (0, _UpdateStats2.default)(stats, { fail: true });\nexpect(stats.tests).to.equal(1);\nexpect(stats.testsRegistered).to.equal(1);\nexpect(stats.passes).to.equal(0);\nexpect(stats.failures).to.equal(1);\nexpect(stats.pending).to.equal(0);\nexpect(stats.passPercent).to.equal(0);\nexpect(stats.pendingPercent).to.equal(0);",
            "err": {},
            "isRoot": false,
            "uuid": "780c82bc-6d07-4b50-bb92-75f5a4d03049",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should incremet pending",
            "fullTitle": "UpdateStats Unit Tests Should incremet pending",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var stats = (0, _InitStats2.default)({ stats: { start: 1, end: 2, _duration: 3 } });\nstats = (0, _UpdateStats2.default)(stats, { pending: true });\nexpect(stats.tests).to.equal(1);\nexpect(stats.testsRegistered).to.equal(1);\nexpect(stats.passes).to.equal(0);\nexpect(stats.failures).to.equal(0);\nexpect(stats.pending).to.equal(1);\nexpect(stats.passPercent).to.equal(0);\nexpect(stats.pendingPercent).to.equal(100);",
            "err": {},
            "isRoot": false,
            "uuid": "56ea7edc-a9f9-4d58-a5e0-4b6ca0af7b3a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should retain values",
            "fullTitle": "UpdateStats Unit Tests Should retain values",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var stats = (0, _InitStats2.default)({ stats: { start: 1, end: 2, _duration: 3 } });\nstats = (0, _UpdateStats2.default)(stats, { pass: true });\nstats = (0, _UpdateStats2.default)(stats, { pass: true });\nstats = (0, _UpdateStats2.default)(stats, { pass: true });\nstats = (0, _UpdateStats2.default)(stats, { fail: true });\nstats = (0, _UpdateStats2.default)(stats, { fail: true });\nstats = (0, _UpdateStats2.default)(stats, { pending: true });\nexpect(stats.tests).to.equal(6);\nexpect(stats.testsRegistered).to.equal(6);\nexpect(stats.passes).to.equal(3);\nexpect(stats.failures).to.equal(2);\nexpect(stats.pending).to.equal(1);\nexpect(stats.passPercent).to.equal(50);\nexpect(stats.pendingPercent).to.equal(17);",
            "err": {},
            "isRoot": false,
            "uuid": "ce62bddf-b1cd-4405-b1ba-6a2fe47de316",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "4f2e5f02-ae80-43f2-ae67-aa474dec887b",
          "780c82bc-6d07-4b50-bb92-75f5a4d03049",
          "56ea7edc-a9f9-4d58-a5e0-4b6ca0af7b3a",
          "ce62bddf-b1cd-4405-b1ba-6a2fe47de316"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 8000
      },
      {
        "uuid": "45abd61b-8347-4594-a571-ab503a35028b",
        "title": "AddTestResult Unit Tests",
        "fullFile": "/Users/jd10778/repos/public/wdio-mochawesome-reporter/src/map_suite/AddTestResult.spec.js",
        "file": "/src/map_suite/AddTestResult.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Should successfully Add A Passing Test",
            "fullTitle": "AddTestResult Unit Tests Should successfully Add A Passing Test",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var testResult = {\n    pass: true,\n    fail: false,\n    pending: false\n};\nvar suiteResult = (0, _AddTestResult2.default)({ tests: [], passes: [] }, testResult);\nexpect(suiteResult.tests.length).to.equal(1);\nexpect(suiteResult.passes.length).to.equal(1);",
            "err": {},
            "isRoot": false,
            "uuid": "e8538bfd-467b-498e-a494-c971c2a722f4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should successfully Add A Failing Test",
            "fullTitle": "AddTestResult Unit Tests Should successfully Add A Failing Test",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var testResult = {\n    pass: false,\n    fail: true,\n    pending: false\n};\nvar suiteResult = (0, _AddTestResult2.default)({ tests: [], failures: [] }, testResult);\nexpect(suiteResult.tests.length).to.equal(1);\nexpect(suiteResult.failures.length).to.equal(1);",
            "err": {},
            "isRoot": false,
            "uuid": "70d85834-967d-450e-91bb-d496ea50df26",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should successfully Add A Pending Test",
            "fullTitle": "AddTestResult Unit Tests Should successfully Add A Pending Test",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var testResult = {\n    pass: false,\n    fail: false,\n    pending: true\n};\nvar suiteResult = (0, _AddTestResult2.default)({ tests: [], pending: [] }, testResult);\nexpect(suiteResult.tests.length).to.equal(1);\nexpect(suiteResult.pending.length).to.equal(1);",
            "err": {},
            "isRoot": false,
            "uuid": "b5cc0b52-7862-4f64-9959-5c8bbe199f31",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "e8538bfd-467b-498e-a494-c971c2a722f4",
          "70d85834-967d-450e-91bb-d496ea50df26",
          "b5cc0b52-7862-4f64-9959-5c8bbe199f31"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 8000
      },
      {
        "uuid": "02cebed1-6eb0-4aa2-8108-9cb7c44438a2",
        "title": "MapSuiteResult Unit Tests",
        "fullFile": "/Users/jd10778/repos/public/wdio-mochawesome-reporter/src/map_suite/MapSuiteResult.spec.js",
        "file": "/src/map_suite/MapSuiteResult.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Should return a vaild Test Suite",
            "fullTitle": "MapSuiteResult Unit Tests Should return a vaild Test Suite",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var data = {\n    title: 'Sample Suite',\n    '_duration': 500\n};\nvar suiteResult = (0, _MapSuiteResult2.default)(false, data, 'phantomjs');\nexpect(suiteResult.title).to.equal('Sample Suite (phantomjs)');\nexpect(suiteResult.duration).to.equal(500);\nexpect(suiteResult.root).to.be.false; // eslint-disable-line no-unused-expressions\nexpect(suiteResult.uuid).to.be.not.empty; // eslint-disable-line no-unused-expressions",
            "err": {},
            "isRoot": false,
            "uuid": "5293c048-b54b-446e-8cd6-deedefb11f7f",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "5293c048-b54b-446e-8cd6-deedefb11f7f"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 8000
      },
      {
        "uuid": "8a88316a-cc61-4485-bf69-d6753741c475",
        "title": "AddContext Unit Tests",
        "fullFile": "/Users/jd10778/repos/public/wdio-mochawesome-reporter/src/map_test/AddContext.spec.js",
        "file": "/src/map_test/AddContext.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Should return context with a the valid Session ID",
            "fullTitle": "AddContext Unit Tests Should return context with a the valid Session ID",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var context = (0, _AddContext2.default)({}, {}, '', 'abc123');\nexpect(context.length).to.equal(1);\nexpect(context[0].title).to.equal('Session Id');\nexpect(context[0].value).to.equal('abc123');",
            "err": {},
            "isRoot": false,
            "uuid": "1ac02081-519d-4974-97c9-ebf727db2563",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should return context provided by a test",
            "fullTitle": "AddContext Unit Tests Should return context provided by a test",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var data = {\n    context: {\n        title: 'sample context',\n        value: 'this is a test'\n    }\n};\nvar context = (0, _AddContext2.default)(data, {}, '', 'abc123');\nexpect(context.length).to.equal(2);\nexpect(context[0].title).to.equal('Session Id');\nexpect(context[0].value).to.equal('abc123');\nexpect(context[1].title).to.equal('sample context');\nexpect(context[1].value).to.equal('this is a test');",
            "err": {},
            "isRoot": false,
            "uuid": "ababdb72-fa36-4393-a50c-b9c374dbccee",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should return multiple context provided by a test",
            "fullTitle": "AddContext Unit Tests Should return multiple context provided by a test",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var data = {\n    context: [{\n        title: 'sample context',\n        value: 'this is a test'\n    }, {\n        title: 'sample context2',\n        value: 'another test'\n    }]\n};\nvar context = (0, _AddContext2.default)(data, {}, '', 'abc123');\nexpect(context.length).to.equal(3);\nexpect(context[0].title).to.equal('Session Id');\nexpect(context[0].value).to.equal('abc123');\nexpect(context[1].title).to.equal('sample context');\nexpect(context[1].value).to.equal('this is a test');\nexpect(context[2].title).to.equal('sample context2');\nexpect(context[2].value).to.equal('another test');",
            "err": {},
            "isRoot": false,
            "uuid": "9c63b959-1eda-4cf7-a978-cda82744490a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should return screenshots as context when file name does not include path",
            "fullTitle": "AddContext Unit Tests Should return screenshots as context when file name does not include path",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var mochawesomOpts = { includeScreenshots: true };\nvar data = {\n    output: [{\n        type: 'screenshot',\n        payload: {\n            filename: 'test.png'\n        }\n    }]\n};\nvar context = (0, _AddContext2.default)(data, mochawesomOpts, '/users/jim', 'abc123');\nexpect(context.length).to.equal(2);\nexpect(context[0].title).to.equal('Session Id');\nexpect(context[0].value).to.equal('abc123');\nexpect(context[1].title).to.equal('Screenshot: test.png');\nexpect(context[1].value).to.equal('/users/jim/test.png');",
            "err": {},
            "isRoot": false,
            "uuid": "4507fe80-0525-48a0-9c27-5c9f86ffb293",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should return screenshots as context when file name does include path",
            "fullTitle": "AddContext Unit Tests Should return screenshots as context when file name does include path",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var mochawesomOpts = { includeScreenshots: true };\nvar data = {\n    output: [{\n        type: 'screenshot',\n        payload: {\n            filename: '/users/jim/test.png'\n        }\n    }]\n};\nvar context = (0, _AddContext2.default)(data, mochawesomOpts, '/users/jim', 'abc123');\nexpect(context.length).to.equal(2);\nexpect(context[0].title).to.equal('Session Id');\nexpect(context[0].value).to.equal('abc123');\nexpect(context[1].title).to.equal('Screenshot: test.png');\nexpect(context[1].value).to.equal('/users/jim/test.png');",
            "err": {},
            "isRoot": false,
            "uuid": "a23500f0-f306-4044-b76f-efefd781e8e9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should not return screenshots as context when the option is on but no screenshots were taken",
            "fullTitle": "AddContext Unit Tests Should not return screenshots as context when the option is on but no screenshots were taken",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var mochawesomOpts = { includeScreenshots: true };\nvar data = {\n    output: [{}]\n};\nvar context = (0, _AddContext2.default)(data, mochawesomOpts, '/users/jim', 'abc123');\nexpect(context.length).to.equal(1);\nexpect(context[0].title).to.equal('Session Id');\nexpect(context[0].value).to.equal('abc123');",
            "err": {},
            "isRoot": false,
            "uuid": "0ff39545-8306-4ad4-96dd-c8dd0f509f41",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "1ac02081-519d-4974-97c9-ebf727db2563",
          "ababdb72-fa36-4393-a50c-b9c374dbccee",
          "9c63b959-1eda-4cf7-a978-cda82744490a",
          "4507fe80-0525-48a0-9c27-5c9f86ffb293",
          "a23500f0-f306-4044-b76f-efefd781e8e9",
          "0ff39545-8306-4ad4-96dd-c8dd0f509f41"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 8000
      },
      {
        "uuid": "63a0e4d6-12da-4570-9045-37fca0f8f5d1",
        "title": "MapError Unit Tests",
        "fullFile": "/Users/jd10778/repos/public/wdio-mochawesome-reporter/src/map_test/MapError.spec.js",
        "file": "/src/map_test/MapError.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Should return error object without actual and expected",
            "fullTitle": "MapError Unit Tests Should return error object without actual and expected",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = {\n    type: 'Timeout Error',\n    message: 'Timed out waiting for visibility of element #foo',\n    stack: 'At line 12 of blah.js'\n};\nvar err = (0, _MapError2.default)(error);\nexpect(err.name).to.equal(error.type);\nexpect(err.message).to.equal(error.message);\nexpect(err.estack).to.equal(error.stack);\nexpect(err.stack).to.equal(error.stack);",
            "err": {},
            "isRoot": false,
            "uuid": "13968adb-71d5-4cb1-b5bd-861c133aed44",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should return error object with actual and expected",
            "fullTitle": "MapError Unit Tests Should return error object with actual and expected",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var error = {\n    type: 'Assertion Error',\n    message: 'Assertion Failed expected \"1\" to be \"2\"',\n    stack: 'At line 12 of blah.js',\n    actual: '1',\n    expected: '2'\n};\nvar err = (0, _MapError2.default)(error);\nexpect(err.name).to.equal(error.type);\nexpect(err.message).to.equal(error.message);\nexpect(err.estack).to.equal(error.stack);\nexpect(err.stack).to.equal(error.stack);\nexpect(err.actual).to.equal(error.actual);\nexpect(err.expected).to.equal(error.expected);\nexpect(err.showDiff).to.be.true; // eslint-disable-line no-unused-expressions",
            "err": {},
            "isRoot": false,
            "uuid": "5a53c282-7ed6-4953-987c-44442c3e259b",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "13968adb-71d5-4cb1-b5bd-861c133aed44",
          "5a53c282-7ed6-4953-987c-44442c3e259b"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 8000
      },
      {
        "uuid": "73aedd70-ca84-4e63-9403-9a9ba4a31ce8",
        "title": "MapState Unit Tests",
        "fullFile": "/Users/jd10778/repos/public/wdio-mochawesome-reporter/src/map_test/MapState.spec.js",
        "file": "/src/map_test/MapState.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Should return passed",
            "fullTitle": "MapState Unit Tests Should return passed",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect((0, _MapState.MapState)('pass')).to.equal('passed');",
            "err": {},
            "isRoot": false,
            "uuid": "3a8c9af9-e6be-48c7-b93e-c33bf4634712",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should return failed",
            "fullTitle": "MapState Unit Tests Should return failed",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect((0, _MapState.MapState)('fail')).to.equal('failed');",
            "err": {},
            "isRoot": false,
            "uuid": "dc458a39-3e9f-4a94-8f6e-1f380c2464a5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should return true when calling DidPass with a state of pass",
            "fullTitle": "MapState Unit Tests Should return true when calling DidPass with a state of pass",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect((0, _MapState.DidPass)('pass')).to.be.true; // eslint-disable-line no-unused-expressions",
            "err": {},
            "isRoot": false,
            "uuid": "31fb5101-daab-4393-bcfe-5db7630ef966",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should return true when calling DidPass with a state of passed",
            "fullTitle": "MapState Unit Tests Should return true when calling DidPass with a state of passed",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect((0, _MapState.DidPass)('passed')).to.be.true; // eslint-disable-line no-unused-expressions",
            "err": {},
            "isRoot": false,
            "uuid": "bf031fea-2635-408d-970f-b1ff673f5720",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should return false when calling DidPass with a state of fail",
            "fullTitle": "MapState Unit Tests Should return false when calling DidPass with a state of fail",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect((0, _MapState.DidPass)('fail')).to.be.false; // eslint-disable-line no-unused-expressions",
            "err": {},
            "isRoot": false,
            "uuid": "6594cb62-73b1-48a7-96bd-262e1e1dbdb3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should return true when calling DidFail with a state of fail",
            "fullTitle": "MapState Unit Tests Should return true when calling DidFail with a state of fail",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect((0, _MapState.DidFail)('fail')).to.be.true; // eslint-disable-line no-unused-expressions",
            "err": {},
            "isRoot": false,
            "uuid": "f2090ede-aa25-47e9-a2cc-8151161e8ac4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should return true when calling DidFail with a state of failed",
            "fullTitle": "MapState Unit Tests Should return true when calling DidFail with a state of failed",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect((0, _MapState.DidFail)('failed')).to.be.true; // eslint-disable-line no-unused-expressions",
            "err": {},
            "isRoot": false,
            "uuid": "e9384249-c9db-4364-89f3-1ff7f30aa391",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should return false when calling DidFail with a state of pass",
            "fullTitle": "MapState Unit Tests Should return false when calling DidFail with a state of pass",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect((0, _MapState.DidFail)('pass')).to.be.false; // eslint-disable-line no-unused-expressions",
            "err": {},
            "isRoot": false,
            "uuid": "5c211f16-641b-4c11-a9c9-9ce677049c46",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should return true when calling DidSkip with a state of skipped",
            "fullTitle": "MapState Unit Tests Should return true when calling DidSkip with a state of skipped",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect((0, _MapState.DidSkip)('skipped')).to.be.true; // eslint-disable-line no-unused-expressions",
            "err": {},
            "isRoot": false,
            "uuid": "63d27985-493a-4a85-ad6b-a7319e2f3db5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should return true when calling DidSkip with a state of pending",
            "fullTitle": "MapState Unit Tests Should return true when calling DidSkip with a state of pending",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect((0, _MapState.DidSkip)('pending')).to.be.true; // eslint-disable-line no-unused-expressions",
            "err": {},
            "isRoot": false,
            "uuid": "67ea8e14-5d36-4fee-a6cc-2ed63e33bb5c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should return false when calling DidSkip with a state of pass",
            "fullTitle": "MapState Unit Tests Should return false when calling DidSkip with a state of pass",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect((0, _MapState.DidSkip)('pass')).to.be.false; // eslint-disable-line no-unused-expressions",
            "err": {},
            "isRoot": false,
            "uuid": "a54d92ed-df11-43cf-b6a3-1c082ccf7e68",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should return undefined for unknown values",
            "fullTitle": "MapState Unit Tests Should return undefined for unknown values",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect((0, _MapState.MapState)('pending')).to.be.undefined; // eslint-disable-line no-unused-expressions",
            "err": {},
            "isRoot": false,
            "uuid": "ea77a307-ca71-4067-b0ae-799231f3ee72",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "3a8c9af9-e6be-48c7-b93e-c33bf4634712",
          "dc458a39-3e9f-4a94-8f6e-1f380c2464a5",
          "31fb5101-daab-4393-bcfe-5db7630ef966",
          "bf031fea-2635-408d-970f-b1ff673f5720",
          "6594cb62-73b1-48a7-96bd-262e1e1dbdb3",
          "f2090ede-aa25-47e9-a2cc-8151161e8ac4",
          "e9384249-c9db-4364-89f3-1ff7f30aa391",
          "5c211f16-641b-4c11-a9c9-9ce677049c46",
          "63d27985-493a-4a85-ad6b-a7319e2f3db5",
          "67ea8e14-5d36-4fee-a6cc-2ed63e33bb5c",
          "a54d92ed-df11-43cf-b6a3-1c082ccf7e68",
          "ea77a307-ca71-4067-b0ae-799231f3ee72"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 8000
      },
      {
        "uuid": "62d8efb8-d95b-4004-a2f2-4da3f4126631",
        "title": "MapTestResult Unit Tests",
        "fullFile": "/Users/jd10778/repos/public/wdio-mochawesome-reporter/src/map_test/MapTestResult.spec.js",
        "file": "/src/map_test/MapTestResult.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Should return a vaild passing test",
            "fullTitle": "MapTestResult Unit Tests Should return a vaild passing test",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var suiteId = (0, _uuid2.default)();\nvar data = {\n    title: 'My Sample Test',\n    '_duration': 1200,\n    state: 'pass'\n};\nvar result = (0, _MapTestResult2.default)(data, suiteId, {}, 'abc123');\nexpect(result.title).to.equal(data.title);\nexpect(result.fullTitle).to.equal(data.title);\nexpect(result.context).to.equal('[{\"title\":\"Session Id\",\"value\":\"abc123\"}]');\nexpect(result.duration).to.equal(1200);\nexpect(result.state).to.equal('passed');\nexpect(result.pass).to.equal(true);\nexpect(result.fail).to.equal(false);\nexpect(result.pending).to.equal(false);\nexpect(result.parentUUID).to.equal(suiteId);\nexpect(result.err).to.be.empty; // eslint-disable-line no-unused-expressions",
            "err": {},
            "isRoot": false,
            "uuid": "99956da9-7364-4f25-9869-e1460147e5c7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should return a vaild failing test",
            "fullTitle": "MapTestResult Unit Tests Should return a vaild failing test",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var suiteId = (0, _uuid2.default)();\nvar data = {\n    title: 'My Sample Test',\n    '_duration': 1200,\n    state: 'fail',\n    error: {\n        type: 'Assertion Error',\n        message: 'Assertion Failed expected \"1\" to be \"2\"',\n        stack: 'At line 12 of blah.js',\n        actual: '1',\n        expected: '2'\n    }\n};\nvar result = (0, _MapTestResult2.default)(data, suiteId, {}, 'abc123');\nexpect(result.title).to.equal(data.title);\nexpect(result.fullTitle).to.equal(data.title);\nexpect(result.context).to.equal('[{\"title\":\"Session Id\",\"value\":\"abc123\"}]');\nexpect(result.duration).to.equal(1200);\nexpect(result.state).to.equal('failed');\nexpect(result.pass).to.equal(false);\nexpect(result.fail).to.equal(true);\nexpect(result.pending).to.equal(false);\nexpect(result.parentUUID).to.equal(suiteId);\nexpect(result.err.name).to.equal(data.error.type);\nexpect(result.err.message).to.equal(data.error.message);\nexpect(result.err.estack).to.equal(data.error.stack);\nexpect(result.err.stack).to.equal(data.error.stack);\nexpect(result.err.actual).to.equal(data.error.actual);\nexpect(result.err.expected).to.equal(data.error.expected);\nexpect(result.err.showDiff).to.equal(true);",
            "err": {},
            "isRoot": false,
            "uuid": "95fb6d57-f2eb-47d3-acc4-3f9c54863872",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should return a vaild skipped test",
            "fullTitle": "MapTestResult Unit Tests Should return a vaild skipped test",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var suiteId = (0, _uuid2.default)();\nvar data = {\n    title: 'My Sample Test',\n    '_duration': 0,\n    state: 'pending'\n};\nvar result = (0, _MapTestResult2.default)(data, suiteId, {}, 'abc123');\nexpect(result.title).to.equal(data.title);\nexpect(result.fullTitle).to.equal(data.title);\nexpect(result.context).to.equal('[{\"title\":\"Session Id\",\"value\":\"abc123\"}]');\nexpect(result.duration).to.equal(data._duration);\nexpect(result.state).to.be.undefined; // eslint-disable-line no-unused-expressions\nexpect(result.pass).to.be.false; // eslint-disable-line no-unused-expressions\nexpect(result.fail).to.be.false; // eslint-disable-line no-unused-expressions\nexpect(result.pending).to.be.true; // eslint-disable-line no-unused-expressions\nexpect(result.parentUUID).to.equal(suiteId);\nexpect(result.err).to.be.empty; // eslint-disable-line no-unused-expressions",
            "err": {},
            "isRoot": false,
            "uuid": "0e59fd97-40b7-42e3-ab7a-9c7e5d0aba68",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "99956da9-7364-4f25-9869-e1460147e5c7",
          "95fb6d57-f2eb-47d3-acc4-3f9c54863872",
          "0e59fd97-40b7-42e3-ab7a-9c7e5d0aba68"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 8000
      },
      {
        "uuid": "db60ac51-d050-42b8-8704-a23da3ff604a",
        "title": "SanitizeScreenshotPath Unit Tests",
        "fullFile": "/Users/jd10778/repos/public/wdio-mochawesome-reporter/src/map_test/SanitizeScreenshotPath.spec.js",
        "file": "/src/map_test/SanitizeScreenshotPath.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Should return a relative path",
            "fullTitle": "SanitizeScreenshotPath Unit Tests Should return a relative path",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var mochawesomeOpts = {\n    screenshotUseRelativePath: true\n};\nexpect((0, _SanitizeScreenshotPath2.default)(mochawesomeOpts, '/Results/screenshots')).to.equal('Results/screenshots');",
            "err": {},
            "isRoot": false,
            "uuid": "6db8e420-6f05-440b-b4f3-16275d6e5aba",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should return a absolute path",
            "fullTitle": "SanitizeScreenshotPath Unit Tests Should return a absolute path",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var mochawesomeOpts = {\n    screenshotUseRelativePath: false\n};\nexpect((0, _SanitizeScreenshotPath2.default)(mochawesomeOpts, './Results/screenshots')).to.equal(_path2.default.join(__dirname, '../../') + 'Results/screenshots');",
            "err": {},
            "isRoot": false,
            "uuid": "07665ee6-d14f-44d4-b2fe-a4e23853934a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "6db8e420-6f05-440b-b4f3-16275d6e5aba",
          "07665ee6-d14f-44d4-b2fe-a4e23853934a"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 8000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 8000
  },
  "copyrightYear": 2018
}